"use strict";function CWDeviceID(major,minor){if(CWUtil.isInt(major)===!1||CWUtil.isInt(minor)===!1)throw"CWDeviceID must contain a valid major and a minor value";var _major=major,_minor=minor;return this.getMajor=function(){return _major},this.getMinor=function(){return _minor},this}function CWDevice(id,options){if(CWDeviceID.prototype.isPrototypeOf(id)===!1)throw"Cannot create device without a valid CWDeviceID";CWUtil.isObject(options)===!1&&(options={});var passedOptions=options;options={};var defaultOptions={proximity:"unknown"};$.extend(options,defaultOptions,passedOptions);var _id=id,_proximity=options.proximity;return this.updateProximity=function(newProximity){_proximity=newProximity},this.getID=function(){return _id},this.getProximity=function(){return _proximity},this}var CWDebug=function(){var CWDEBUG=!1,log=function(message){CWDEBUG&&console.log("WEBLIB    "+_getDateString()+" -- "+message)},_getDateString=function(date){void 0===date&&(date=new Date);var hours=date.getHours();hours=1===hours.length?"0"+hours:hours;var minutes=date.getMinutes();minutes=1===minutes.length?"0"+minutes:minutes;var seconds=date.getSeconds();seconds=1===seconds.length?"0"+seconds:seconds;var milliseconds=date.getMilliseconds();return milliseconds=1===milliseconds.length?"00"+milliseconds:milliseconds,milliseconds=2===milliseconds.length?"0"+milliseconds:milliseconds,hours+":"+minutes+":"+seconds+"."+milliseconds};return{log:log}}();CWDeviceID.prototype.equalTo=function(object){return CWDeviceID.prototype.isPrototypeOf(object)===!1?!1:this.getMajor()===object.getMajor()&&this.getMinor()===object.getMinor()},CWDeviceID.prototype.toString=function(){return"("+this.getMajor()+"."+this.getMinor()+")"},CWDevice.prototype.equalTo=function(object){return CWDevice.prototype.isPrototypeOf(object)===!1?!1:this.getID().equalTo(object.getID())},CWDevice.prototype.toString=function(){return""+this.getID()};var CWDeviceManager=function(){var _localID,_remoteDevices=[],setLocalID=function(ID){if(void 0!==_localID)throw"Local ID can only be set once";_localID=ID,CWDebug.log("Local ID set to "+(""+_localID)),CWEventManager.trigger("localIDSet",_localID)},addDevice=function(newDevice){if(CWDevice.prototype.isPrototypeOf(newDevice)===!1)throw"Cannot add a non-device";if(null!==_getDeviceWithID(newDevice.getID()))throw"Device with ID "+newDevice.getID()+" was added twice";_remoteDevices.push(newDevice),CWDebug.log("Detected new device: "+newDevice),CWEventManager.trigger("deviceDetected",newDevice)},updateDeviceProximity=function(ID,newProximity){if(CWDeviceID.prototype.isPrototypeOf(ID)===!1)throw"A DeviceID is needed to update a device";var device=_getDeviceWithID(ID);if(null===device)throw"Tried to change proximity of an undetected device";device.updateProximity(newProximity),CWDebug.log("Distance of "+this+" changed to "+newProximity),CWEventManager.trigger("deviceProximityChanged",device)},removeDevice=function(ID){if(CWDeviceID.prototype.isPrototypeOf(ID)===!1)throw"A DeviceID is needed to remove a device";var device=_getDeviceWithID(ID);if(null===device)throw"Tried to remove a device that doesn't exist";var index=_remoteDevices.indexOf(device);_remoteDevices.splice(index,1),CWEventManager.trigger("deviceLost",device)},_getDeviceWithID=function(ID){if(CWDeviceID.prototype.isPrototypeOf(ID)===!1)throw"A DeviceID is needed to search for an existing device";for(var i=0;_remoteDevices.length>i;i++){var remoteDevice=_remoteDevices[i];if(remoteDevice.getID().equalTo(ID))return remoteDevice}return null};return{setLocalID:setLocalID,addDevice:addDevice,updateDeviceProximity:updateDeviceProximity,removeDevice:removeDevice}}(),CWEventManager=function(){var _events={},register=function(event,callback){if("string"!=typeof event)throw"Event name must be a string";if("function"!=typeof callback)throw"Event callback must be a function";_events[event]||(_events[event]=[]),_events[event].push(callback),CWDebug.log("Attached callback to "+event)},trigger=function(event){if(_events[event]){var args=Array.prototype.slice.call(arguments);args.shift();for(var i=0;_events[event].length>i;i++){var callback=_events[event][i];callback.apply(null,args)}}};return{register:register,trigger:trigger}}(),CWNativeCommunicationParser=function(){var parse=function(message){var object=JSON.parse(message);switch(object.type){case"localid":var ID=new CWDeviceID(object.major,object.minor);CWDeviceManager.setLocalID(ID);break;case"newbeacon":var device=new CWDevice(new CWDeviceID(object.major,object.minor),{proximity:object.proximity});CWDeviceManager.addDevice(device);break;case"deviceproximitychanged":CWDeviceManager.updateDeviceProximity(new CWDeviceID(object.major,object.minor),object.proximity);break;case"devicelost":CWDeviceManager.removeDevice(new CWDeviceID(object.major,object.minor))}};return{parse:parse}}(),CWUtil=function(){var isInt=function(value){return value===parseInt(value)},isObject=function(value){return"object"==typeof value&&null!==value},inArray=function(value,array){return array.indexOf(value)>-1};return{isInt:isInt,isObject:isObject,inArray:inArray}}(),CWWebserverCommunicationParser=function(){var parse=function(message){var object=JSON.parse(message);switch(object.type){case"debug":CWDebug.CWDEBUG=Boolean(object.cwdebug)}};return{parse:parse}}(),Connichiwa=function(){var _websocket=new WebSocket("ws://127.0.0.1:8001");_websocket.onopen=function(){CWDebug.log("Websocket opened"),CWEventManager.trigger("ready")},_websocket.onmessage=function(e){var message=e.data;CWDebug.log("message: "+message),CWNativeCommunicationParser.parse(message),CWWebserverCommunicationParser.parse(message)},_websocket.onerror=function(){CWDebug.log("Websocket error")},_websocket.onclose=function(){CWDebug.log("Websocket closed")};var on=function(event,callback){var validEvents=["ready","localIDSet","deviceDetected","deviceProximityChanged","deviceLost"];if(CWUtil.inArray(event,validEvents)===!1)throw"Registering for invalid event: "+event;CWEventManager.register(event,callback)};return{on:on}}();