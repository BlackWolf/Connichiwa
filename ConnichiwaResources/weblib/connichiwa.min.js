"use strict";function CWDevice(identifier,options){CWUtil.isObject(options)===!1&&(options={});var passedOptions=options;options={};var defaultOptions={connected:!1,distance:-1};$.extend(options,defaultOptions,passedOptions);var _identifier=identifier,_connected=options.connected,_distance=options.distance;return this.didConnect=function(){_connected=!0},this.didDisconnect=function(){_connected=!1},this.updateDistance=function(value){_distance=value},this.getIdentifier=function(){return _identifier},this.isConnected=function(){return _connected},this.getDistance=function(){return _distance},this}var CWDebug=function(){var CWDEBUG=!1,log=function(message){CWDEBUG&&console.log("WEBLIB    "+_getDateString()+" -- "+message)},_getDateString=function(date){void 0===date&&(date=new Date);var hours=date.getHours();hours=1===hours.length?"0"+hours:hours;var minutes=date.getMinutes();minutes=1===minutes.length?"0"+minutes:minutes;var seconds=date.getSeconds();seconds=1===seconds.length?"0"+seconds:seconds;var milliseconds=date.getMilliseconds();return milliseconds=1===milliseconds.length?"00"+milliseconds:milliseconds,milliseconds=2===milliseconds.length?"0"+milliseconds:milliseconds,hours+":"+minutes+":"+seconds+"."+milliseconds};return{log:log}}();CWDevice.prototype.equalTo=function(object){return this.getIdentifier()===object.getIdentifier()},CWDevice.prototype.toString=function(){return this.getIdentifier()};var CWDeviceManager=function(){var _localIdentifier,_remoteDevices=[],setLocalID=function(identifier){if(void 0!==_localIdentifier)throw"Local identifier can only be set once";_localIdentifier=identifier,CWDebug.log("Local identifier set to "+_localIdentifier),CWEventManager.trigger("localIdentifierSet",_localIdentifier)},addDevice=function(newDevice){if(CWDevice.prototype.isPrototypeOf(newDevice)===!1)throw"Cannot add a non-device";if(null!==_getDeviceWithIdentifier(newDevice.getIdentifier()))throw"Device with identifier "+newDevice.getIdentifier()+" was added twice";_remoteDevices.push(newDevice),CWDebug.log("Detected new device: "+newDevice),CWEventManager.trigger("deviceDetected",newDevice)},updateDeviceDistance=function(identifier,newDistance){var device=_getDeviceWithIdentifier(identifier);if(null===device)throw"Tried to update the distance of an undetected device";device.updateDistance(newDistance),CWDebug.log("Distance of "+this+" changed to "+newDistance),CWEventManager.trigger("deviceDistanceChanged",device)},removeDevice=function(identifier){var device=_getDeviceWithIdentifier(identifier);if(null===device)throw"Tried to remove a device that doesn't exist";var index=_remoteDevices.indexOf(device);_remoteDevices.splice(index,1),CWEventManager.trigger("deviceLost",device)},_getDeviceWithIdentifier=function(identifier){for(var i=0;_remoteDevices.length>i;i++){var remoteDevice=_remoteDevices[i];if(remoteDevice.getIdentifier()===identifier)return remoteDevice}return null};return{setLocalID:setLocalID,addDevice:addDevice,updateDeviceDistance:updateDeviceDistance,removeDevice:removeDevice}}(),CWEventManager=function(){var _events={},register=function(event,callback){if("string"!=typeof event)throw"Event name must be a string";if("function"!=typeof callback)throw"Event callback must be a function";_events[event]||(_events[event]=[]),_events[event].push(callback),CWDebug.log("Attached callback to "+event)},trigger=function(event){if(_events[event]){var args=Array.prototype.slice.call(arguments);args.shift();for(var i=0;_events[event].length>i;i++){var callback=_events[event][i];callback.apply(null,args)}}};return{register:register,trigger:trigger}}(),CWNativeCommunicationParser=function(){var parse=function(message){var object=JSON.parse(message);switch(object.type){case"localidentifier":CWDeviceManager.setLocalID(object.identifier);break;case"devicedetected":var device=new CWDevice(object.identifier);CWDeviceManager.addDevice(device);break;case"devicedistancechanged":CWDeviceManager.updateDeviceDistance(object.identifier,object.distance);break;case"devicelost":CWDeviceManager.removeDevice(object.identifier)}};return{parse:parse}}(),CWUtil=function(){var isInt=function(value){return value===parseInt(value)},isObject=function(value){return"object"==typeof value&&null!==value},inArray=function(value,array){return array.indexOf(value)>-1};return{isInt:isInt,isObject:isObject,inArray:inArray}}(),CWWebserverCommunicationParser=function(){var parse=function(message){var object=JSON.parse(message);switch(object.type){case"debug":CWDebug.CWDEBUG=Boolean(object.cwdebug)}};return{parse:parse}}(),Connichiwa=function(){var _websocket=new WebSocket("ws://127.0.0.1:8001");_websocket.onopen=function(){CWDebug.log("Websocket opened"),CWEventManager.trigger("ready")},_websocket.onmessage=function(e){var message=e.data;CWDebug.log("message: "+message),CWWebserverCommunicationParser.parse(message),CWNativeCommunicationParser.parse(message)},_websocket.onerror=function(){CWDebug.log("Websocket error")},_websocket.onclose=function(){CWDebug.log("Websocket closed")};var on=function(event,callback){var validEvents=["ready","localIdentifierSet","deviceDetected","deviceDistanceChanged","deviceLost"];if(CWUtil.inArray(event,validEvents)===!1)throw"Registering for invalid event: "+event;CWEventManager.register(event,callback)},connect=function(device){if(CWDevice.prototype.isPrototypeOf(device)===!1)throw"Need a CWDevice to connect to";if(!device.isConnected()){var data={type:"connectionRequest",identifier:device.getIdentifier()};_websocket.send(JSON.stringify(data))}};return{on:on,connect:connect}}();